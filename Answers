1. READABILITY
- What pieces of code help versus obscure your understanding of the algorithm?

	The comments are vague and don't explain the code's functionality.
	The operation that computes the worst fit is confusing.
	The variable names are too simple to help readability.

- What comments might be helpful within the code?

	A note of the fundamental difference between the two sorting algorithms would help clarify their implementation.
	Also, a brief step by step of the most important parts of the code would help.

- Are there places where the code could be more concise and also more clear?

	The part that reads the data seems verbose and stores it seems verbose, and a bit confusing to what's going on.
	Also, the actual implementation of the worst-fit method is a bit criptic because the algorithm used isn't trivially simple, and might confuse someone who has just picked up the code.


2. TESTABILITY
- How would you test this code for bugs?

	Test "extreme" conditions, like seeing what happens when a bin is filled 100%, without leaving any free bytes.
	Or, interleaving a lot of small files of different sizes.

- Give a specific example of a "test case" as the code is currently written.

	Have a 200.000 size file, and a 800.000 file being added.

- What additional functions may be helpful?

	A printing function, that just displays the current state of the bins. Not only it's required for the output, it can be used to navigate the steps of a simple test and check if the code is functioning correctly.

- Give a specific example of a "test case" for your new function.

	

	
3. EXTENSIBILITY

- What Code Smells can you find?

- What suggestions does this code make about how someone would extend it in the future to compare the performance of a wider variety of fitting algorithms?

- What dependencies are there between different parts of the code?

- How easy to find are those dependencies?

- Can you clarify or remove those dependencies?


